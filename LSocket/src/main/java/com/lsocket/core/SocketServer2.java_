/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 *//*

package com.lsocket.core;

import com.lgame.util.thread.NameThreadFactory;
import com.lsocket.config.ServerConfig;
import org.apache.mina.core.buffer.IoBuffer;
import org.apache.mina.core.buffer.SimpleBufferAllocator;
import org.apache.mina.core.filterchain.DefaultIoFilterChainBuilder;
import org.apache.mina.core.filterchain.IoFilter;
import org.apache.mina.core.service.IoHandler;
import org.apache.mina.core.service.SimpleIoProcessorPool;
import org.apache.mina.filter.codec.ProtocolCodecFactory;
import org.apache.mina.filter.codec.ProtocolCodecFilter;
import org.apache.mina.filter.executor.ExecutorFilter;
import org.apache.mina.filter.executor.OrderedThreadPoolExecutor;
import org.apache.mina.filter.logging.MdcInjectionFilter;
import org.apache.mina.transport.socket.DefaultSocketSessionConfig;
import org.apache.mina.transport.socket.SocketAcceptor;
import org.apache.mina.transport.socket.SocketSessionConfig;
import org.apache.mina.transport.socket.nio.NioProcessor;
import org.apache.mina.transport.socket.nio.NioSession;
import org.apache.mina.transport.socket.nio.NioSocketAcceptor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.net.InetSocketAddress;
import java.util.concurrent.TimeUnit;

*/
/**
 *
 * @author penn.ma <penn.pk.ma@gmail.com>
 *//*

public class SocketServer2 {

    private static final Logger logger = LoggerFactory.getLogger(SocketServer2.class);
//    private static final String testname = GameConfig.gameName;
    private static final int SERVER_PORT = ServerConfig.socketPort;
    private static final boolean IS_TCP_NODELAY = ServerConfig.tcpNodelay;
    private static final int WORKER_POOL_MAX = ServerConfig.workerPoolMax;
    private static final int WORKER_POOL_MIN = ServerConfig.workerPoolMin;
    private static final int SOCKET_BOTH_IDLE = ServerConfig.socketBothIdle;
    private static final int WORKER_POOL_IDLE = ServerConfig.workerPoolIdle;
    private static final int READ_BUFFER_SIZE = ServerConfig.readBufferSize;
    private static final int WRITE_BUFFER_SIZE = ServerConfig.writeBufferSize;
    private static final int RECEIVE_BUFFER_SIZE = ServerConfig.readBufferSize;
    private static final int SERVER_MAX_BACKLOG = ServerConfig.serverMaxBacklog;
    private static final int SOCKET_WRITE_TIMEOUT = ServerConfig.socketWriteTimeout;
    private static final SimpleIoProcessorPool<NioSession> pool = new SimpleIoProcessorPool(NioProcessor.class, ServerConfig.serverNioProcess);
    private IoHandler ioHandler;
    private SocketAcceptor acceptor;
    private InetSocketAddress address;
    private IoFilter cmdAttackFilter;
    private IoFilter byteAttackFilter;
    private ProtocolCodecFactory codecFactory;
    private static final String THREAD_NAME = "Socket线程池";
    private static final ThreadGroup THREAD_GROUP = new ThreadGroup(THREAD_NAME);
    private static final NameThreadFactory THREAD_FACTORY = new NameThreadFactory(THREAD_GROUP, THREAD_NAME, 2);
    private static final OrderedThreadPoolExecutor FILTER_EXECUTOR = new OrderedThreadPoolExecutor(WORKER_POOL_MIN,
            WORKER_POOL_MAX,
            WORKER_POOL_IDLE,
            TimeUnit.SECONDS,
            THREAD_FACTORY);

    public SocketServer2(ProtocolCodecFactory protocolCodecFactory, IoHandler ioHandler) {
        this.ioHandler = ioHandler;
        this.codecFactory = protocolCodecFactory;
    }

    public SocketServer2(ProtocolCodecFactory protocolCodecFactory, IoHandler ioHandler, IoFilter byteAttackFilter, IoFilter cmdAttackFilter) {
        this(protocolCodecFactory, ioHandler);
        this.cmdAttackFilter = cmdAttackFilter;
        this.byteAttackFilter = byteAttackFilter;
    }

    public void start()
            throws Exception {
        if (this.codecFactory == null) {
            throw new NullPointerException("ProtocolCodecFactory is null...");
        }
        if (this.ioHandler == null) {
            throw new NullPointerException("IoHandler is null...");
        }
        IoBuffer.setUseDirectBuffer(false);
        IoBuffer.setAllocator(new SimpleBufferAllocator());
        this.acceptor = new NioSocketAcceptor(pool);
        this.acceptor.setReuseAddress(true);
        this.acceptor.setBacklog(SERVER_MAX_BACKLOG);
        this.acceptor.getSessionConfig().setAll(getSessionConfig());
        MdcInjectionFilter mdcInjectionFilter = new MdcInjectionFilter();
        DefaultIoFilterChainBuilder filterChain = this.acceptor.getFilterChain();
        filterChain.addLast("mdcInjectionFilter", mdcInjectionFilter);
        if (this.byteAttackFilter != null) {
            filterChain.addLast("byteAttackFilter", this.byteAttackFilter);
        }
        if (this.cmdAttackFilter != null) {
            filterChain.addLast("cmdAttackFilter", this.cmdAttackFilter);
        }
        filterChain.addLast("codecFactory", new ProtocolCodecFilter(this.codecFactory));

        filterChain.addLast("threadPool", new ExecutorFilter(FILTER_EXECUTOR));
        this.acceptor.setHandler(this.ioHandler);
        this.address = new InetSocketAddress(SERVER_PORT);
        this.acceptor.bind(this.address);
        logger.info("Listening on " + this.address.getHostName() + ":" + this.address.getPort());
    }

    public SocketSessionConfig getSessionConfig() {
        SocketSessionConfig sessionConfig = new DefaultSocketSessionConfig();
        sessionConfig.setSoLinger(0);
        sessionConfig.setKeepAlive(true);
        sessionConfig.setReuseAddress(true);
        sessionConfig.setTcpNoDelay(IS_TCP_NODELAY);
        sessionConfig.setBothIdleTime(SOCKET_BOTH_IDLE);
        sessionConfig.setReadBufferSize(READ_BUFFER_SIZE);
        sessionConfig.setSendBufferSize(WRITE_BUFFER_SIZE);
        sessionConfig.setWriteTimeout(SOCKET_WRITE_TIMEOUT);
        sessionConfig.setReceiveBufferSize(RECEIVE_BUFFER_SIZE);
      //  sessionConfig.setIdleTime(IdleStatus.BOTH_IDLE,10); 
        
        return sessionConfig;
    }

    public void stop() {
        if (this.acceptor != null) {
            this.acceptor.unbind();
            this.acceptor.dispose();
            this.acceptor = null;
        }
        if (FILTER_EXECUTOR != null) {
            FILTER_EXECUTOR.shutdown();
            try {
                FILTER_EXECUTOR.awaitTermination(5000L, TimeUnit.MILLISECONDS);
            } catch (InterruptedException e) {
                logger.error("停服抛出了异常", e);
            }
        }
    }

    public ProtocolCodecFactory getProtocolCodecFactory() {
        return this.codecFactory;
    }

    public void setProtocolCodecFactory(ProtocolCodecFactory protocolCodecFactory) {
        this.codecFactory = protocolCodecFactory;
    }

    public IoHandler getIoHandler() {
        return this.ioHandler;
    }

    public void setIoHandler(IoHandler ioHandler) {
        this.ioHandler = ioHandler;
    }

    public IoFilter getFloodByteAttackFilter() {
        return this.byteAttackFilter;
    }

    public void setFloodByteAttackFilter(IoFilter floodByteAttackFilter) {
        this.byteAttackFilter = floodByteAttackFilter;
    }

    public IoFilter getFloodCmdAttackFilter() {
        return this.cmdAttackFilter;
    }

    public void setFloodCmdAttackFilter(IoFilter floodCmdAttackFilter) {
        this.cmdAttackFilter = floodCmdAttackFilter;
    }
}
*/
